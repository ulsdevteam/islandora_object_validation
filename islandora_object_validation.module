<?php

/**
 * @file
 * Allows validation of Islandora objects by checking for the existence of
 * the configured datastreams for each object model.
 *
 */

// pids_fetch_methods:
define('ISLANDORA_OBJECT_VALIDATION_FETCH_LISTPIDS', 0);
define('ISLANDORA_OBJECT_VALIDATION_FETCH_SOLR', 1);
define('ISLANDORA_OBJECT_VALIDATION_FETCH_COLLECTION', 2);
define('ISLANDORA_OBJECT_VALIDATION_FETCH_MODEL', 3);

/**
 * Implements hook_menu().
 */
function islandora_object_validation_menu() {
  $items = array(
    'admin/islandora/tools/islandora_object_validation' => array(
      'title' => t('Islandora Object Validation'),
      'description' => t('Configure settings for the Islandora Object Validation module.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_object_validation_admin_settings'),
      'access arguments' => array('administer islandora_object_validation'),
      'file' => 'includes/admin.form.inc',
    ),
    'admin/islandora/tools/islandora_object_validation/validate_objects' => array(
      'title' => t('Validation Failures'),
      'description' => t('Reports for the Islandora Object Validation module.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_object_validation_validate_objects'),
      'access arguments' => array('administer islandora_object_validation'),
      'file' => 'includes/validate_objects.form.inc',
      'type' => MENU_CALLBACK,
    ),
    'admin/islandora/tools/islandora_object_validation/queue_do_chunk' => array(
      'title' => t('Process ' . number_format(variable_get('islandora_object_validation_cron_limit', 4000)) .
          ' items validation queue'),
      'description' => t('Clicking this will call `islandora_object_validation' .
          '_validate_chunk_of_objects` which is what gets called by the drush call ' .
          ' to "islandora_object_validation_validate_chunk_of_objects" via CRON ' .
          '(if configured). '),
      'page callback' => 'islandora_object_validation_queue_do_chunk',
      'access arguments' => array('administer islandora_object_validation'),
      'file' => 'includes/validate_objects.form.inc',
      'type' => MENU_CALLBACK,
    ),
    // AJAX callback to add an islandora object to the validation queue.
    'admin/islandora/tools/islandora_object_validation/queue_object/%' => array(
      'page callback' => 'islandora_object_validation_queue_object',
      'page arguments' => array(5),
      'access arguments' => array('administer islandora_object_validation'),
      'file' => 'includes/validate_objects.form.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/object/%islandora_object/manage/islandora_object_validation' => array(
      'title' => 'Validation History',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_object_validation_history_form', 2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/islandora_object_validation_history.form.inc',
      'access arguments' => array('administer islandora_object_validation'),
    ),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_object_validation_permission() {
  return array(
    'administer islandora_object_validation' => array(
      'title' => t('Administer Islandora Object Validation'),
      'description' => t('Configure the required datastreams for all object models and what to do with the failed objects.'),
    ),
  );
}

/**
 * Implements hook_presprocess_theme().
 *
 * This code will add the javascript if on a islandora_object_validation
 * page.
 */
function islandora_object_validation_preprocess_page(&$vars) {
  $item = menu_get_item();
  if (is_array($item)) {
    if ($item['path'] == 'admin/islandora/tools/islandora_object_validation' ||
      $item['path'] == 'admin/islandora/tools/islandora_object_validation/validate_objects' ||
      $item['path'] == 'islandora/object/%islandora_object/manage/islandora_object_validation') {
      $module_path = drupal_get_path('module', 'islandora_object_validation');
      drupal_add_css($module_path . '/css/islandora_object_validation.css');
      drupal_add_js($module_path . '/js/islandora_object_validation.js');
    }
  }
}

/**
 * Implements hook_islandora_object_ingested().
 */
function islandora_object_validation_islandora_object_ingested($object) {
  if (variable_get('islandora_object_validation_validate_on_ingest', 0)) {
    module_load_include('inc', 'islandora_object_validation', 'includes/utilities');
    islandora_object_validation_validate($object);
  }
}

/**
 * Helper function to retrieve the Forena reports in the "Islandora Object
 * Validation" category
 *
 * NOTE: This will not return any reports that have their "Hidden" property set
 * to TRUE within their General settings page.
 *
 * @return string
 *   Markup for the links to each of the found forena reports.
 */
function islandora_object_validation_strap_report_reports() {
  module_load_include('inc', 'forena', 'forena.common');
  $category = 'Islandora Object Validation';
  $reports = forena_get_user_reports($category);
  $report_repos = variable_get('forena_path', 'reports');
  $output = (!$reports) ? 'No Reports Found' : t('View results of object validation testing.') . "<br>";
  foreach ($reports as $category => $reports) {
    foreach ($reports as $r) {
      $output .= l($r['title'], $report_repos . '/' . str_replace('/', '.', $r['report_name'])) .
              ((isset($r['description']) && $r['description']) ? '<br><span class="small_lt_text"> - ' . $r['description'] . '<br></span>': '') . "<br>";
    }
  }

  return $output;
}

/**
 * Inspect the datastream requirements for a given model PID.
 *
 * This will return an array of optional and required datastreams.
 *
 * @param string $model_pid
 *   Fedora content model PID
 * @return array
 *   Array of required / optional dasastreams for model_requirements
 */
function islandora_object_validation_object_model_datastream_requirements($model_pid) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $model = @islandora_object_load($model_pid);
  // Only can proceed if the islandora model here has the DS-COMPOSITE-MODEL.
  $model_requirements = array();
  $model_has_content = '';
  try {
    $model_dsids = array();
    $had_DS_COMPOSIT = FALSE;
    foreach ($model as $dsid => $fedoraDatastream) {
      $had_DS_COMPOSIT |= ($dsid == ISLANDORA_DS_COMP_STREAM);
    }
    if ($had_DS_COMPOSIT) {
      $model_has_content = $model[ISLANDORA_DS_COMP_STREAM]->content;
    }
  }
  catch (Exception $exception) {
    // Some islandora model objects do not have the DS-COMPOSITE-MODEL
  }
  if (isset($model) && is_object($model) && $model_has_content) {
    $ds_reqs = islandora_get_datastreams_requirements_from_content_model($model);
    if (array_key_exists('RELS-EXT', $ds_reqs)) {
      if (array_key_exists('RELS-EXT', $ds_reqs) && $ds_reqs['RELS-EXT']['optional']) {
        $ds_reqs['RELS-EXT']['optional'] = FALSE;
      }
      if (array_key_exists('TN', $ds_reqs) && $ds_reqs['TN']['optional']) {
        $ds_reqs['TN']['optional'] = FALSE;
      }
    }
    // We want to override the value for RELS-INT here - it's required.
    if (is_array($ds_reqs)) {
      $model_requirements = $ds_reqs;
    }
  }
  // RELS-EXT
  // Structure the return array to have two subarrays -- one with "required"
  // datastreams and another with "optional" datastreams.
  $return_array = array();
  foreach ($model_requirements as $dsid => $model_requirement) {
    if ($model_requirement['optional'] == FALSE) {
      $return_array['required'][$dsid] = array(
          'id' => $model_requirement['id'],
          'mime' => $model_requirement['mime'],
      );
    }
    else {
      $return_array['optional'][$dsid] = array(
          'id' => $model_requirement['id'],
          'mime' => $model_requirement['mime'],
      );
    }
  }
  return $return_array;
}
